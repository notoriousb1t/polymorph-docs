import{_ as e,o as a,c as n,e as s}from"./app-wQz1sGeA.js";const t={},o=s(`<h1 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference" aria-hidden="true">#</a> API Reference</h1><h2 id="interpolate-paths-options" tabindex="-1"><a class="header-anchor" href="#interpolate-paths-options" aria-hidden="true">#</a> interpolate(paths, options)</h2><p>Returns a function that interpolates between two or more paths.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// create function to interpolate between the two paths</span>
<span class="token keyword">const</span> interpolator <span class="token operator">=</span> polymorph<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;#play&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;#pause&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">addPoints</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
   <span class="token literal-property property">origin</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token literal-property property">optimize</span><span class="token operator">:</span> <span class="token string">&#39;fill&#39;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">precision</span><span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// pass a number between 0 and 1. 0.5 is 50% in the middle.</span>
<span class="token keyword">const</span> midway <span class="token operator">=</span> <span class="token function">interpolator</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="paths" tabindex="-1"><a class="header-anchor" href="#paths" aria-hidden="true">#</a> paths</h3><p>An array of path data. Each item can be a PathElement, a CSS selector, or a path string (&#39;M0,0 ...&#39;)</p><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>addPoints</td><td>Adds additional points to each side of the tween over what is required. This takes effect when optimize is set to <code>fill</code>. The default value is <code>0</code>.</td></tr><tr><td>origin</td><td>There are two modes to origin: absolute and relative. When absolute is true, <code>x</code> and <code>y</code> are exact coordinates in the SVG space. When absolute is false, <code>x</code> and <code>y</code> are values between <code>0</code> and <code>1</code> representing 0% to 100% of the bounding box of the path. This is similar to transform-origin in CSS. The default value is <code>{ x: 0, y: 0, absolute: false }</code> (upper left corner of the bounding box of the path)</td></tr><tr><td>optimize</td><td>Determines the strategy for aligning two disparate shapes. <code>none</code> does nothing and should be used when the paths are optimized by hand. <code>fill</code> creates new subpaths as needed and inserts additional points as needed. The default value is <code>fill</code>.</td></tr><tr><td>precision</td><td>The number of decimal places to use when rendering paths. Increasing this value smooths out shapes at the cost of browser rendering speed on some platforms. The default value is <code>0</code></td></tr></tbody></table>`,8),p=[o];function i(r,c){return a(),n("div",null,p)}const l=e(t,[["render",i],["__file","api.html.vue"]]);export{l as default};
